#+title: Piers Cawley's Literate Emacs Config
#+author: Piers Cawley
#+property: header-args:emacs-lisp :tangle yes :results silent :exports code
#+options: html-style:nil

* Why a Literate Emacs Config?

** Background
I tend to suck at writing comments, but I also tend to leave things for ages between bursts of activity, so having some way of picking up my thoughts is really handy. I want to be able to get context back when I return to a project, and I've found from the experience of [[https://bofh.org.uk/2019/02/25/baking-with-emacs/][running the bakery with emacs]] that a literate programming approach can really help.

** My Setup
There's any number of ways of setting up a literate Emacs configuration. My plan is to have this file as the Single Source Of Truth for everything emacs related that I've written and which isn't otherwise available in another package.

I'll be using XDG based paths, and placing most of the product files in ~~/.config/pdcmacs/~ and using a [[https://github.com/plexus/chemacs2][Chemacs2]] checkout in ~~/.config/emacs/~ to select this configuration.

The config is devided into the following parts.

1. Bog standard -early-init.el- setting up things like -straight.el-
2. An -init.el- with the more detailed configuration
3. Package specific support functions and configuration in a -modules/- subdirectory
4. My yasnippet snippets in -snippets/-

And, in the "nice to have" department:

1. build script to bring up Emacs how I like it
2. The various support bits and bobs to allow exporting this to my hugo-based [[https://bofh.org.uk][blog]].



** TODO Porting from legacy to Literate [2/4]

- [X] Move ~early-init.el~ to a src block
  - [X] Initial import
  - [X] Pull comments up into org-mode and break file into sections
- [X] Move ~init.el~ to a src block
  - [X] Initial import
  - [X] Make more literate
- [ ] Move ~config.el~ to src block
  - [ ] Initial import
  - [ ] Break into sections
  - [ ] Merge with init.el
- [ ] Move ~modules/~ into src blocks and make literate

* Initial Setup

This only needs executing the first time you use this setup. It moves any prexisting ~~/.emacs.d/~ directory to ~~/.emacs.d.bak/~, ~~.emacs~ goes to ~~/.emacs.bak/~ and any non-chemacs2 version of ~~/.config/emacs/~ goes to ~~/.config/emacs.default/~. Execute the block using =C-c C-c=

#+begin_src sh :results silent :tangle no
  # Error out early

  set -euo pipefail
  set -o noclobber

  # Create ~/.config/emacs folder with chemacs2 in it
  if [ -d ~/.config/emacs ]
  then
      # Is it already a chemacs directory?
      if (cd ~/.config/emacs && git remote show origin | grep -q chemacs2)
      then
          echo "Chemacs2 installed!"
      else
          if [ -d ~/.config/emacs.legacy ]
          then
              echo "We already have emacs.legacy, exiting"
              exit -1
          else
              mv ~/.config/emacs ~/.config/emacs.legacy
          fi
      fi
  fi
  git clone https://github.com/plexus/chemacs2.git ~/.config/emacs/
  mkdir -p ~/.config/chemacs/
  echo >~/.config/chemacs/profiles.el <<EOF
  (("legacy" . ((user-emacs-directory . "~/.config/emacs.legacy") (server-name .  "emacs-legacy") (straight-p . t)))
   ("default" . ((user-emacs-directory . "~/.config/pdcmacs") (server-name . "pdcmacs") (straight-p . t))))
  EOF

  echo "Setting up pdcmacs folder in ~/.config"
  mkdir -p ~/.config/pdcmacs/secrets
  mkdir -p ~/.config/pdcmacs/snippets
  mkdir -p ~/.config/pdcmacs/abbrevs

  if [ -L ~/.emacs.d ] && [ -d ~/.emacs.d ]
  then
      echo "~/.emacs.d is already a symlink"
  else
      echo "Creating symlink"
      if [ -d ~/.emacs.d ]
      then
          echo "~/.emacs.d exists, moving to .emacs.d.bak"
          mv ~/.emacs.d ~/.emacs.d.bak
      fi
      ln -s ~/.config/emacs ~/.emacs.d
  fi




#+end_src

* Creating early-init.el
:PROPERTIES:
:header-args:emacs-lisp: :tangle early-init.el
:END:

I use ~early-init.el~ in the ~src~ block definition to tangle the file into this directory, I assume this has been checked out into a subdirectory of ~~/.config/~ that matches a Chemacs2 profile name. This file is loaded before the package system or GUI of Emacs is loaded and is ideally code that does not depend on any packages or the size of the frame.

** Turn on lexical binding and warn about editing

Your basic preamble comment

#+begin_src emacs-lisp
  ;;; early-init.el -*- lexical-binding: t; -*-
  ;;; WARNING: This file is generated by an org file, don't edit it directly

#+end_src

** Inhibit packages at startup
We use straight and configure it a little later.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Accelerate startup some

Increasing the GC thresholds and turning off file name handlers during startup makes things a fair bit faster, so we do that. The 'proper' values will be restored by our ~emacs-startup-hook~.

#+begin_src emacs-lisp
  (let ((initial-gc-cons-threshold gc-cons-threshold)
        (initial-gc-cons-percentage gc-cons-percentage)
        (initial-file-name-handler-alist file-name-handler-alist))
    (setq gc-cons-threshold most-positive-fixnum
          gc-cons-percentage 0.6)

    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq gc-cons-threshold initial-gc-cons-threshold
                      gc-cons-percentage initial-gc-cons-percentage
                      file-name-handler-alist initial-file-name-handler-alist))))

#+end_src

** Set up native compilation as we like it.

- Prefer the loading the newest compiled .el file
- Silence deferred native compilation warnings and compile asynchronously
- Drop the compiled files in ~eln-cache/~

#+begin_src emacs-lisp
  (setq load-prefer-newer noninteractive)
  (when (featurep 'native-compile)
    (setq native-comp-async-report-warnings-errors nil
          native-comp-deferred-compilation t)
    (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory)))
#+end_src

** Add the mode to the frame title format

I plan to start voice coding again some time, and find it's easier to switch the coding grammar if the emacs mode is visible in the window name.

#+begin_src emacs-lisp
  (setq frame-title-format '(mode-name ":%b"))
#+end_src

** Inhibit a bunch of startup cruft

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        ring-bell-function 'ignore
        use-dialog-box t
        use-file-dialog nil
        use-short-answers t
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name
        inhibit-startup-buffer-menu t
        inhibit-startup-message t
        confirm-kill-processes nil)

  (setq default-frame-alist
        (append default-frame-alist
                '((fullscreen . maximized)
                  (tool-bar-lines . 0)
                  (menu-bar-lines . 0)
                  (vertical-scroll-bars . nil)
                  (internal-border-width . 2)
                  (undecorated-round . t)
                  (scroll-bar-mode . -1))))

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)

  (setopt large-file-warning-threshold (* 100 1000 1000))

#+end_src

* Creating init.el
:PROPERTIES:
:header-args:emacs-lisp: :tangle init.el
:END:

Again, we're tangling into a ~init.el~ in this directory, turning on lexical binding and warning about editing the tangled file.

#+begin_src emacs-lisp
  ;;; init.el -*- lexical-binding: t; -*-
  ;;; WARNING: This file is generated by an org file, don't edit it directly

#+end_src

Next we set up our modules directory

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "modules/" user-emacs-directory))
#+end_src

And setup some support variables relating to the structure of our config directory.

#+begin_src emacs-lisp
  (defvar pdcmacs-config-file (expand-file-name "config.el"  user-emacs-directory)
    "Our post-init config file.")

  (defvar pdcmacs-init-file (expand-file-name "init.el" user-emacs-directory))

  (defvar pdcmacs-etc-directory (expand-file-name "etc/" user-emacs-directory)
    "Our etc/ directory.")
  (defvar pdcmacs-var-directory (expand-file-name "var/" user-emacs-directory)
    "Our var/ directory.")

  (mkdir pdcmacs-etc-directory t)
  (mkdir pdcmacs-var-directory t)
#+end_src

Next we let Emacs know, unequivocally, that we prefer ~utf-8~ encoding.

#+begin_src emacs-lisp
(setopt locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(set-clipboard-coding-system 'utf-8)
(setopt x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

#+end_src

We don't make much use of the internal ~custom~ facility, but when we do, we don't want it stomping all over ~init.el~, so we move it away:

#+begin_src emacs-lisp
  (setopt custom-file (expand-file-name "preferences.el" pdcmacs-etc-directory))
#+end_src

** Package Management

We use ~straight.el~ and ~use-package~ to manage our packages. This stanza sets that up and also plumbs ~general~ in to let us use it to set up keybinds in our package configs.

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (straight-use-package 'diminish)
  (straight-use-package 'general)
  (setq general-use-package-emit-autoloads t)
  (require 'general-autoloads)
  (or (require 'use-package nil t)
      (straight-use-package use-package))

#+end_src

We also want to plumb ~which-key~ into ~use-package~ and set up a couple of variables associated with our leader-key based keymaps.

#+begin_src emacs-lisp
  (defvar pdc-leader "M-m")
  (defvar pdc-mode-leader "C-,")
g
  (use-package which-key
  :diminish
  :config
  ;; TODO: Replace this with something advice based.
  (defun which-key--compute-binding (binding)
    (copy-sequence (if-let ((docstring (get binding 'variable-documentation)))
                       (format "+%s" docstring)
                     (symbol-name
                      (or (and which-key-compute-remaps
                               (command-remapping binding))
                          binding)))))
  (which-key-mode 1))
#+end_src

** Org Mode
It's almost reached the point where it's not really an Emacs configuration if it doesn't include ~org-mode~, especially if it's a literate configuration, so let's get it loaded up. We use ~straight-use-package~ here rather than ~use-package~ to ensure we get the most recent version, not the one that comes with Emacs.

#+begin_src emacs-lisp
  (straight-use-package 'org)
#+end_src

*** Org Congfiguration Module

** Set Helper Functions and Macros

*** use-feature for Emacs builtins

First, let's set up a ~use-feature~ macro that works like ~use-package~ for libraries that come with emacs. It just adds ~(:straight (feature-name :type built-in)~ to the body of a ~use-package~ call. I always forget the exact incantation, so into a macro it goes.

#+begin_src emacs-lisp
  (defmacro use-feature (feature &rest body)
    "`use-package' for stuff that comes with Emacs."
    (declare (indent defun))
    `(use-package ,feature
       :straight (,feature :type built-in)
       ,@body))

  (defconst use-feature-font-lock-keywords
    '(("(\\(use-feature\\)\\_>[ \t']*\\(\\(?:\\sw\\|\\s_\\)+\\))?"
       (1 font-lock-keyword-face)
       (2 font-lock-constant-face nil t))))

  (font-lock-add-keywords 'emacs-lisp-mode use-feature-font-lock-keywords)

#+end_src

*** Conditional config macros

~for-(terminal|gui|mac)~ allow us to setup behaviour that only applies in specific UI contexts.

#+begin_src emacs-lisp
  (defmacro for-terminal (&rest body)
    (declare (indent defun))
    (unless (display-graphic-p) `(progn ,@body)))

  (defmacro for-gui (&rest body)
    (declare (indent defun))
    (when (display-graphic-p) `(progn ,@body)))

  (defmacro for-mac (&rest body)
    (declare (indent defun))
    (when (eq "darwin" system-type) `(progn ,@body)))

#+end_src

** Prevent Emacs dropping files hither and yon

~no-littering~ is a handy tool to stop Emacs dropping temporary files all over the shop.

#+begin_src emacs-lisp
  (use-package no-littering
  :config
  (setq auto-save-file-name-transforms
        `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,(no-littering-expand-var-file-name "auto-save/\\2") t)
          (".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  (setq server-socket-dir (no-littering-expand-var-file-name "server/")))
#+end_src

** Set up the UI

#+begin_src emacs-lisp
  ;;
  ;; Appearance

  (use-package doom-themes
    :config
    (load-theme 'doom-zenburn t)
    )

  (use-package display-line-numbers
    :hook
    ((conf-mode prog-mode text-mode) . 'display-line-numbers-mode)
    :init
    (setopt
     display-line-numbers-grow-only t
     display-line-numbers-type t
     display-line-numbers-width nil))
#+end_src

** Load extra configuration and customizations

The pre-literate version of this file separated initialization into ~init.el~ and ~config.el~ file, so we need to load ~config.el~ and then any customizations. However, eventually, the plan is to eliminate ~config.el~ entirely.

#+begin_src emacs-lisp
  (when (file-exists-p pdcmacs-config-file)
    (load pdcmacs-config-file))

  (when (file-exists-p custom-file)
    (load custom-file))


#+end_src
