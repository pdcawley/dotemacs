#+PROPERTY: header-args :tangle yes :results output silent

#+name: 70AB9C8D-1A72-4061-9261-B764F88A4666
#+begin_src emacs-lisp :comments no
;; -*- no-byte-compile: t; -*-
#+end_src

* Org-Mode Fundamentals
  :PROPERTIES:
  :ID:       1A1C1230-8604-453C-84C9-6842CEA4EA61
  :END:

Configure Org-Mode core functionality to compile this system.

Sysop is likely to use this periodically.

** Bootstrap Org-Mode
   :PROPERTIES:
   :ID:       FDEEC0F2-491E-4045-A2CD-2F4E2C18E871
   :END:

*** Principles of Least astonishment
    :PROPERTIES:
    :ID:       5F371083-B866-433C-89B0-E44322709081
    :END:

**** Time
     :PROPERTIES:
     :ID:       4B783634-6ECA-4C9C-B260-95C4DBD2C609
     :END:
     Standardize timestamps.

     #+name: 4D60C1ED-D8E2-49EA-BB0D-E31739773A57
     #+begin_src emacs-lisp
       (defun pdc/get-timestamp ()
         "Produces a full ISO 8601 format timestamp."
         (interactive)
         (let* ((timestamp-without-timezone (format-time-string "%Y-%m-%dT%T"))
                (timezone-name-in-numeric-format (format-time-string "%z"))
                (timezone-utf-offset
                 (concat (substring timezone-name-in-numeric-format 0 3)
                         ":"
                         (substring timezone-name-in-numeric-format 3 5)))
                (timestamp (concat timestamp-without-timezone
                                   timezone-utf-offset)))
           timestamp))

       (defun pdc/insert-timestamp ()
         "Inserts a full ISO 8601 format timestamp."
         (interactive)
         (insert (pdc/get-timestamp)))


       (defun pdc/get-timestamp-no-colons ()
         "Produces a full ISO 8601 format timestamp with colons replaced by hyphens."
         (interactive)
         (let* ((timestamp (pdc/get-timestamp))
                (timestamp-no-colons (replace-regexp-in-string ":" "-" timestamp)))
           timestamp-no-colons))


       (defun pdc/insert-timestamp-no-colons ()
         "Inserts a full ISO 8601 format timestamp with colons replaced by hyphens."
         (interactive)
         (insert (pdc/get-timestamp-no-colons)))

       (defun pdc/insert-datestamp ()
         "Produces and inserts a partial ISO 8601 format timestamp."
         (interactive)
         (insert (format-time-string "%F")))
     #+end_src

**** Garbage collection
     :PROPERTIES:
     :ID:       AD1DB3A1-FC73-4E8F-9B7F-9AF98D3BA1C9
     :END:

     Clear memory and disable garbage collection or return garbage collection to normal.

     #+name: F175D074-7375-46E4-BFD8-CDF6B02DB567
     #+begin_src emacs-lisp
       (setq pdc/default-gc-cons-threshold gc-cons-threshold)
       (defun pdc/set-gc-cons-threshold (&optional multiplier notify)
         "Set `gc-cons-threshold' either to its default value or a
       `multiplier' thereof."
         (let* ((new-multiplier (or multiplier 1))
                (new-threshold (* pdc/default-gc-cons-threshold
                                  new-multiplier)))
           (setq gc-cons-threshold new-threshold)
           (when notify (message "Setting `gc-cons-threshold' to %s" new-threshold))))
     #+end_src

**** Load behaviour
     :PROPERTIES:
     :ID:       144FC1A1-98F0-4D40-99D3-9DDA2051FA57
     :END:

     Emacs can load 3 different representations of an Emacs-Lisp
     source file's code OOTB. The name of the source code file is the
     value before the file extension. When you pass ~load~ a name, it
     searches for an acceptable representation. Representation types
     are indicated by their extention name:

     - =.el= :: Human readable and uncompiled.
     - =.elc= :: Machine readable and compiled.
     - =.gz= :: Gzip compressed, containing either =.el= or =.elc=
                data.

     The variable ~load-suffixes~ determines the order of which text
     and byte-code representations are first searched by
     exension-name. The variable ~load-file-rep-suffixes~ determines
     the order for all other extension types.

     Out of the box, EMACS thinks that ~load~'ing bytecode first, text
     second, and compressed third is the best choice. It's the fastest
     code at runtime. This is fine, so long as you /always/ remember
     to compile your source code. Yeah. Right.

     In my world, loading the newest version is the best choice.

     #+name: CE6B7251-8AE2-4B6C-9540-FE954B559429
     #+begin_src emacs-lisp
       (setq load-prefer-newer t)
     #+end_src

*** Org-mode minimal setup
    :PROPERTIES:
    :ID:       5310B15F-CC4E-4EB4-BC1C-60650837AF41
    :END:

    Every new EMACS release comes with the latest stable Org-Mode
    release. Boring. Better to be on the leading edge, which has
    historically been remarkably robust.

    The [[http://orgmode.org/manual/Installation.html][instructions]] on the Org-Mode site explain how to run from Git.
    Follow them. The important thing to remember here is that you need
    to get the cutting edge version of Org-Mode loaded bright and
    early, or you might accidentally load the one that comes with
    Emacs and confusion will ensue. Confusion is bad. We deprecate
    confusion.


**** Things That Must Occur Before Loading Org-Mode
     :PROPERTIES:
     :ID:       0FC118C1-C738-45BE-90E0-ACDD9A762002
     :END:

     Add the Org-Mode core distribution to the load path.

     #+name: E95F3821-A7C5-46FA-843B-8510CC72AE01
     #+begin_src emacs-lisp
       (add-to-list 'load-path (expand-file-name "vendor/org-mode/lisp/"
                                                 user-emacs-directory))
     #+end_src

     Add the Org-Mode-Contributions distribution to the load path.
     These are essential.

     #+name: 4473D419-AF05-40B1-8073-A3BA66BE8401
     #+begin_src emacs-lisp
       (add-to-list 'load-path (expand-file-name "vendor/org-mode/contrib/lisp"
                                                 user-emacs-directory))
     #+end_src

     Allow single-character alphabetical bullet lists. This
     configuraion must occur before loading Org-Mode. *Never* remove
     this from an ECM.

     #+name: 821C570F-E0DD-44F2-B295-78389912A98A
     #+begin_src emacs-lisp
       (setq org-list-allow-alphabetical t)
     #+end_src

     Unchecked boxes prevent marking the parent as done. This
     configuration must occur before loading Org-Mode. *Never* remove
     this from an ECM.

     #+name: 23264B11-F752-4A1F-9C52-BE943C83F74A
     #+begin_src emacs-lisp
       (setq org-enforce-todo-checkbox-dependencies t)
     #+end_src

     Use =GUILLEMET= delimiters for =noweb=. (=C-x 8 <= and =C-x 8 >=)

     #+name: 43783CA9-65FC-45C4-8565-F9ACB1302BD3
     #+begin_src emacs-lisp
       (setq org-babel-noweb-wrap-start "«")
       (setq org-babel-noweb-wrap-end "»")
     #+end_src

**** Loading Org-Mode.
     :PROPERTIES:
     :ID:       F1648B58-9A99-4980-84D1-77B61FDD8176
     :END:

     #+name: 8C10520F-CFA1-416C-A9B1-FF95D9AD499D
     #+begin_src emacs-lisp
       (require 'org)
     #+end_src

**** Things That Must Occur After Loading Org-Mode
     :PROPERTIES:
     :ID:       6C0A2CA0-959E-4E63-A656-F54B5C591913
     :END:

     Helper doubles available memory.

     #+name: F5A68338-EDE1-49AD-98DF-F7928F25FDC4
     #+begin_src emacs-lisp
       (defun pdc/double-gc-cons-threshold ()
         "Double `gc-cons-threshold'."
         (pdc/set-gc-cons-threshold 2))
     #+end_src

     Double garbage collection during tangling. Instead of storing
     this in the primary Org-Mode Literate Programming config, have it
     here so it's always available.

     #+name: CF97435B-4248-4BA5-86E6-0EB74025FD81
     #+begin_src emacs-lisp
       (add-hook 'org-babel-pre-tangle-hook #'pdc/double-gc-cons-threshold)
       (add-hook 'org-babel-post-tangle-hook #'pdc/set-gc-cons-threshold)
     #+end_src

     Display system info.

     #+name: 99312E1A-272A-40A5-8DD6-977C0C7CD955
     #+begin_src emacs-lisp
       (defun pdc/display-system-info ()
         (interactive)
         (message "<<<ECM Information>>>\nThis buffer file: %s\nAs Of: %s\nOrg-Version: %s\nOrg-Git-Version:%s\nEmacs-Version: %s\nNoweb wrap start and stop delimeters: '%s' and '%s'\norg-babel-default-header-args:\n"
                  buffer-file-name
                  (pdc/get-timestamp)
                  (org-version)
                  (org-git-version)
                  (emacs-version)
                  org-babel-noweb-wrap-start
                  org-babel-noweb-wrap-end)
         (pp org-babel-default-header-args))
       (pdc/display-system-info)
     #+end_src

** Literate Programming
   :PROPERTIES:
   :ID:       FA03C84B-7573-478B-8695-4AB5A6E3E0AF
   :END:

 #+macro lp-configure-each-sb Configuration likely per Source-Block or System.

 The following is extensively borrowed from [[https://github.com/grettke/help/][HELP]].

 This system enables you to perform 3 Literate Document activities

 - Tangling
 - Evaluating
 - Weaving

 Combined they provide a rich Literate Programming environment.

 These activities are not performed interactively. They are automatic
 operations that occur as a result of the configuration by the document
 itself.

 The following is the guide for the default configuration of this
 system and how it behaves.

 Key:

 - Columns
   - S :: Source document modified?
   - T :: Destination tangled-document modified?
   - W :: Destination weaved-document modified?
   - C :: Source-Block Evaluation occurred?
   - O :: Org-Macro Expansion occurred?

 | Activity   | S | T | W | C | P |
 |------------+---+---+---+---+---|
 | Tangling   | F | T | F | F | F |
 | Evaluating | T | F | F | T | F |
 | Weaving    | F | F | T | F | T |

 They are separate and distinct operations.

 "Programming" is logically an activity that is the combination of
 these 3 activities. It is interactively performed by Sysop. It is not
 a distinct or isolated operation. Result of one activity exist here
 and serve as inputs to another activity.

*** Helper Functions
    :PROPERTIES:
    :ID:       FB02C08D-C089-4EFE-BAD5-F0ABE0ADCDED
    :END:

Help configure Org-Mode

#+name: DF4DB8F7-CD00-4942-B4AA-03B6E5D2DFED
#+begin_src emacs-lisp
  (defun pdc/set-org-babel-default-header-args (property value)
    "Easily set system header arguments in org mode.

  PROPERTY is the system-wide value you would like to modify.

  VALUE is the new value you wish to store."
    (setq org-babel-default-header-args
          (cons (cons property value)
                (assq-delete-all property org-babel-default-header-args))))

  (defun pdc/set-org-babel-default-inline-header-args (property value)
    "See `pdc/set-org-babel-default-header-args'; same but for inline header args."
    (setq org-babel-default-inline-header-args
          (cons (cons property value)
                (assq-delete-all property org-babel-default-inline-header-args))))

  (defun pdc/set-org-babel-default-header-args:R (property value)
    "See `pdc/set-org-babel-default-header-args'; same but for R.

  Yes, this is copy and paste. No, I've not got around to refactoring yet."
    (setq org-babel-default-header-args:R
          (cons (cons property value)
                (assq-delete-all property org-babel-default-header-args:R))))

  (defun pdc/set-org-babel-default-header-args:ditaa (property value)
    "See `pdc/set-org-babel-default-header-args'; same but for ditaa.

  Yes, this is copy and paste. No, I've not got around to refactoring yet."
    (setq org-babel-default-header-args:ditaa
          (cons (cons property value)
                (assq-delete-all property org-babel-default-header-args:ditaa))))

  (defun pdc/set-org-babel-default-header-args:dot (property value)
    "See `pdc/set-org-babel-default-header-args'; same but for dot.

  Yes, this is copy and paste. No, I've not got around to refactoring yet."
    (setq org-babel-default-header-args:dot
          (cons (cons property value)
                (assq-delete-all property org-babel-default-header-args:dot))))

  (defun pdc/set-org-babel-default-header-args:plantuml (property value)
    "See `pdc/set-org-babel-default-header-args'; same but for plantuml.

  Yes, this is copy and paste. No, I've not got around to refactoring yet."
    (setq org-babel-default-header-args:plantuml
          (cons (cons property value)
                (assq-delete-all property org-babel-default-header-args:plantuml))))

  (defun pdc/org-toggle-macro-markers ()
    (interactive)
    (setq org-hide-macro-markers (not org-hide-macro-markers)))


  (defun pdc/org-prp-hdln ()
    "Visit every Headline. If it doesn't have an ID property then add one and assign it a UUID.

  It is OK to leave the colon separator in here because these are
  never used as Source-Blocks and the rest of the code expects the
  colon separator."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (dolist (p (nreverse
                  (org-element-map (org-element-parse-buffer 'headline) 'headline
                    (lambda (headline) (org-element-property :begin headline)))))
        (goto-char p)
        (org-id-get-create))
      (save-buffer)))

  (defun pdc/org-id-new ()
    "Repurposing `org-id' hit a snag when colons were forbidden in Source-Block
     names. Adding support for a user-defined Org-Id separatorw would have fixed
     this but with no benefit to Org-Id. So this function removes the colon
     instead.
    "
       (interactive)
       (let* ((gend (org-id-new))
              (newid (replace-regexp-in-string ":" "_" gend)))
         newid))

  (defun pdc/org-prp-src-blk ()
    "If it doesn't have a NAME property then add one and assign it a UUID."
    (interactive)
    (pdc/org-2every-src-block
     #'(lambda (element)
         (if (not (org-element-property :name element))
             (let ((i (org-get-indentation)))
               (beginning-of-line)
               (save-excursion (insert "#+name: " (pdc/org-id-new) "\n"))
               (indent-to i)
               (forward-line 2))))))


  (defconst pdc/org-special-pre "^\s*#[+]")

  (defun pdc/org-2every-src-block (fn)
    "Visit every Source-Block and evaluate `FN'."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((case-fold-search t))
        (while (re-search-forward (concat pdc/org-special-pre "begin_src") nil t)
          (let ((element (org-element-at-point)))
            (when (eq (org-element-type element) 'src-block)
              (funcall fn element)))))
      (save-buffer)))

  (defun pdc/org-babel-demarcate-block ()
    "Add a NAME property then assign it a UUID."
    (interactive)
    (org-babel-demarcate-block)
    (insert "#+name: " (pdc/org-id-new))
    (beginning-of-line)
    (insert "\n"))
#+end_src

*** Identity
    :PROPERTIES:
    :ID:       F997D844-63E1-4631-939E-9506161153A3
    :END:

A Headline's primary key is =ID=. Use =org-id= to manage it.

#+name: 0F3F1451-2E4B-43A0-BB0D-607F251ECE87
#+begin_src emacs-lisp
(require 'org-id)
#+end_src

In Links: Never use =ID= or =CUSTOM_ID=; always use the file name and
text to make it accessible outside of Emacs.

#+name: D43E64BA-E83A-4F49-BF4E-3231EBBE7133
#+begin_src emacs-lisp
(setq org-id-link-to-org-use-id 'nil)
#+end_src

Make sure that =ID= is always unique, portable, and easy to maintain
by
- Using an acceptable prefix
  - Memorable
    - So you can remember where you created it and when
    - So you can share it and let the recipient know (in theory useful)
    - So you can enable a non Emacs/Org-Mode user to owrk with the
      tangled code referening its origin
  - Valid
    - Must be both LaTeX lable and XHTML identifier compliant
      - ~org-lint~ checks for this
- Include the current login
- Include the current domain
- Use a UUID

#+name: 60467171-C64F-4A0D-8C79-F791C4477376
#+begin_src emacs-lisp
  (setq org-id (concat "org_" (user-real-login-name)
                       "_" (pdc/get-timestamp-no-colons)
                       "_" (system-name)))
  (setq org-id-method 'uuid)
#+end_src

*** Tangling
    :PROPERTIES:
    :ID:       856FA1AD-61E0-4B22-A4D1-8C38F03776B4
    :END:

=ID= and =NAME= are essential for succesful =LP= using
~org-babel-tangle-jump-to-org~.

#+name: AC92545D-1714-4FAE-BE95-079F73B6D72B
#+begin_src emacs-lisp
  (add-hook 'org-babel-pre-tangle-hook #'pdc/org-prp-hdln)
  (add-hook 'org-babel-pre-tangle-hook #'pdc/org-prp-src-blk)
#+end_src

There is a way to disable property inheritance that speeds up tangling
a lot. This is only for user-defined properties; *not* Org-Mode
properties.

The problem is that you lose property inheritance, which is
unacceptable. Never, never allow that. It's inconsistent with how
Org-Mode works.

#+name: A6058F50-ABBB-4150-BABA-7DCA4B2759A9
#+begin_src emacs-lisp
(setq org-babel-use-quick-and-dirty-noweb-expansion nil)
#+end_src

Assume that tangled documents always live within the same directory
structure as their origin documents.

#+name: 1622A8EB-7D6B-4691-8E1C-02DD6822E0C1
#+begin_src emacs-lisp
(setq org-babel-tangle-use-relative-file-links t)
#+end_src

- Post tangle actions
  - Indentation
    - At first glance, this is surprising! The author should be
      responsible for the indentation, right? Well, yes, but there's
      an exception: using ~:noweb-ref~ source block concatenation [[http://orgmode.org/manual/noweb_002dref.html][It]]
      is powerful and elegant. But the source blocks are indented on
      their own line. It forces any reader to format it to make any
      sense of it. Which is a poor start to using the tangled files.
      So tangled files get indented.

#+name: 2EE848D5-32AB-453C-89E9-99C7E3A7DBD1
#+begin_src emacs-lisp
  (defun pdc/org-babel-post-tangle-hook-fn ()
    (interactive)
    (indent-region (point-min) (point-max) nil)
    (save-buffer))
  (add-hook 'org-babel-post-tangle-hook #'pdc/org-babel-post-tangle-hook-fn)
#+end_src

**** comments
     :PROPERTIES:
     :ID:       65329DEE-30F9-4914-921B-96B29C2A51EC
     :END:

#+begin_quote
Toggle insertion of comments in tangled code files
#+end_quote

Provide as much information as possible in the tangled artifact about
the origin artifact.

#+name: E627505F-BBED-47D5-8500-6A4DC86DBF5E
#+begin_src emacs-lisp
(pdc/set-org-babel-default-header-args :comments "noweb")
#+end_src

**** mkdirp
     :PROPERTIES:
     :ID:       67DECC3E-1AA1-4983-BB0E-504B881C57DD
     :END:

#+begin_quote
Toggle creation of parent directories of target files during tangling
#+end_quote

#+name: 0C0ED2A3-7817-401D-82B8-0CD11C2A0BE7
#+begin_src emacs-lisp
(pdc/set-org-babel-default-header-args :mkdirp "yes")
#+end_src

**** no-expand
     :PROPERTIES:
     :ID:       75D4E2F9-A9B8-4BA5-85B9-49F62B65508C
     :END:

#+begin_quote
Turn off variable assignment and noweb expansion during tangling
#+end_quote

{{{lp-configure-each-sb}}}

**** noweb
     :PROPERTIES:
     :ID:       701BB8AF-09CA-47C5-AFB8-F83C19F371B0
     :END:

#+begin_quote
Toggle expansion of noweb references
#+end_quote

Expand noweb references in source-blocks before:

| Activity   | Expand |
|------------+--------|
| Tangling   | T      |
| Evaluating | T      |
| Weaving    | F      |

This embraces the notion that you are telling the right thing to the
computer and the right thing to the human. By the time you get to
exporting, you ought to refer to the generated document.

#+name: A4BCD012-E846-4C97-92C5-76FA2B9AD9ED
#+begin_src emacs-lisp
(pdc/set-org-babel-default-header-args :noweb "no-export")
#+end_src

**** noweb-ref
     :PROPERTIES:
     :ID:       BD00A8DF-EE8A-4212-9F5F-3A996DD9D1CB
     :END:

#+begin_quote
Specify a block's noweb reference resolution target
#+end_quote

{{{lp-configure-each-sb}}}

**** noweb-sep
     :PROPERTIES:
     :ID:       ADB6203B-95D2-4A2A-B8AF-12A4F570AD49
     :END:

#+begin_quote
String used to separate noweb references
#+end_quote

{{{lp-configure-each-sb}}}

**** padline
     :PROPERTIES:
     :ID:       7FDB07E1-58EA-4360-A076-9948B9B7C114
     :END:

#+begin_quote
Control insertion of padding lines in tangled code files
#+end_quote

- ~org-babel-tangle-jump-to-org~ requires padded lines. This
  configuration could arguably appear in the "Programming" heading
  because it impacts operation. It lives here because it *must* occur
  as part of the Tangling activity so that it can be used in the
  Programming activity.

#+name: 76AE965E-1616-4E57-B21D-FB6333956830
#+begin_src emacs-lisp
(pdc/set-org-babel-default-header-args :padline "yes")
#+end_src

**** session
     :PROPERTIES:
     :ID:       E95DDDF0-250A-46A5-91F6-B39C39828146
     :END:

#+begin_quote
Preserve the state of code evaluation
#+end_quote

{{{lp-configure-each-sb}}}

For some situations, this may be the same for every source block for a
particular language. R is a good example.

**** session
     :PROPERTIES:
     :ID:       499E104C-63A5-4074-8D8C-8B4B0B99FADF
     :END:

#+begin_quote
Make tangled files executable
#+end_quote

{{{lp-configure-each-sb}}}

**** tangle
     :PROPERTIES:
     :ID:       47D549C5-CE20-4296-9121-A5353A7BFB6A
     :END:

#+BEGIN_QUOTE
Toggle tangling and specify file name
#+END_QUOTE

#+name: EB52D425-4060-4D0A-8342-A599E12536C9
#+BEGIN_SRC emacs-lisp
(pdc/set-org-babel-default-header-args :tangle "no")
#+END_SRC

**** tangle-mode
     :PROPERTIES:
     :ID:       8A3268DD-F022-4C07-AA9A-6DE46B717AC8
     :END:

#+BEGIN_QUOTE
Set permission of tangled files
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** Evaluating
    :PROPERTIES:
    :ID:       889FCFE5-47CC-452B-A888-4FAD2A10854C
    :END:

Org-Mode may use all of the listed languages.

#+name: 50C3232A-F778-4176-9210-AD9B2141830F
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (org . t)
     ;;
     (C . t)
     (R . t)
     (python . t)
     (perl . t)
     (ruby . t)
     (sass . t)
     (scheme . t)
     (sql . t)
     (js . t)
     ;;
     (latex . t)
     ;;
     (makefile . t)
     (shell . t)
     ;;
     (ditaa . t)
     (dot . t)
     (plantuml . t)))
#+end_src

**** cache
     :PROPERTIES:
     :ID:       C46AFC25-370A-43BC-A818-8B59BF22EC22
     :END:

#+BEGIN_QUOTE
Avoid re-evaluating unchanged code blocks
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** colnames
     :PROPERTIES:
     :ID:       FC8853FC-E516-4935-8C2B-1923653CA307
     :END:

#+BEGIN_QUOTE
Handle column names in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** dir
     :PROPERTIES:
     :ID:       02BAAAAD-0DAA-4EA9-B371-425F178024F2
     :END:

#+BEGIN_QUOTE
Specify the default (possibly remote) directory for code block execution
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** epilogue
     :PROPERTIES:
     :ID:       B2F8E91A-0011-4B21-AC6A-D549BE702BBB
     :END:

#+begin_quote
Text to append to code block body
#+end_quote

See Prologue.

**** eval
     :PROPERTIES:
     :ID:       E15B4CA8-80B7-4043-B7CA-A4ABD3124FAA
     :END:

#+BEGIN_QUOTE
Limit evaluation of specific code blocks
#+END_QUOTE

Never evaluate source-blocks or in-line-source-blocks *on export*

#+name: C371F3AC-50D8-4507-93C1-F789D26C351D
#+BEGIN_SRC emacs-lisp
  (pdc/set-org-babel-default-header-args :eval "never-export")
  (pdc/set-org-babel-default-inline-header-args :eval "never-export")
  (setq org-export-babel-evaluate nil)
#+END_SRC

**** file
     :PROPERTIES:
     :ID:       B5E8B47F-177B-4B27-9287-46FDB9E77975
     :END:

#+BEGIN_QUOTE
Specify a path for file output
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** file-desc
     :PROPERTIES:
     :ID:       AFB18FD2-B827-4273-8088-2EF05FB5301B
     :END:

#+BEGIN_QUOTE
Specify a description for file results
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** file-ext
     :PROPERTIES:
     :ID:       DB11AA90-917C-4B88-B2D1-7FD7F072A347
     :END:

#+BEGIN_QUOTE
Specify an extension for file output
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** hlines
     :PROPERTIES:
     :ID:       638C0456-1871-405F-B751-3313FB3B25C0
     :END:

#+BEGIN_QUOTE
Handle horizontal lines in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** output-dir
     :PROPERTIES:
     :ID:       33FACBDE-4534-48DF-8472-5C67BC229CB9
     :END:

#+BEGIN_QUOTE
Specify a directory to write file output to
#+END_QUOTE

{{{lp-configure-each-sb}}}

One example is a System where *all* intermediate resulst are stored to
individual files.

**** post
     :PROPERTIES:
     :ID:       1B5B1803-788C-4476-B593-96E23B2EFFEE
     :END:

#+BEGIN_QUOTE
Post processing of code block results
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** prologue
     :PROPERTIES:
     :ID:       27CB5196-37CC-4664-AA0F-F71C138808F8
     :END:

#+BEGIN_QUOTE
Text to prepend to code block body
#+END_QUOTE

{{{lp-configure-each-sb}}}

For some situations, this may be the same for every source block for a
particular language. The user manual described ~gnuplot~, which often
shows up on the list and solution is to ~reset~ the session.

Another example, say that you've got a bunch of R Source-Blocks and
you want to be able to rearrange them as you please. You want to be
sure that there are no dependencies between tehm on bindings created
in the workspace. Set ~prologue~ to ~rm(list = ls())~.

Epilogue works hand in hand with this.

**** results
     :PROPERTIES:
     :ID:       4180A033-EE11-4D93-9534-FF4D99E27E83
     :END:

#+BEGIN_QUOTE
Specify the type of results and how they will be collected and handled
#+END_QUOTE

Ways to configure =:results=: src_emacs-lisp{(apply '* (-keep 'cdr '((Collection . 2) (Type . 4) (Format . 7) (Handling . 4))))} {{{results(=224=)}}}.

This system stores the results of evaluation in the source document.
It believes that the results are critical to the research.

Keep the document as close to being executable as possible; make it
very visible when it is not.

- Collection
  - =value=: Functions have a single result. So do Source-Blocks.
- Types
  - =scalar=:
    - Functions always return a single result
    - This seems to be the most commonly useful, so I want to
      configure this to work right for =Literate Programming= by
      default.
  - =table=:
    - In theory, Tables are the best type because
      - Dimensions make them human readable in text.
      - Work with Babel LP.
      - Appear as lists to programming languages.
      - Weaves well.
      - Inline Source-Blocks disallow tables so use scalars instead.
- Format
  - =drawer=: Enable results replacement
- Handling
  - =replace=: Replace them each time you evaluate the block.


#+name: 768F382C-7CF7-4663-9DE9-5905F2FC5FF0
#+begin_src emacs-lisp
  (defconst pdc/org-sb-results-cfg "value scalar drawer replace")
  (pdc/set-org-babel-default-header-args :results pdc/org-sb-results-cfg)
#+end_src

Their format will show that they are results. Inline source blocks
automatically get formatted as verbatim. For some reason, this only
needs to be configured as =replace= to work, unlike normal source
blocks. Copying the configuration from normal source blocks here
breaks the replacement functionality.

#+name: F7A4D520-5B95-4448-8CBC-1A7D46252D03
#+begin_src emacs-lisp
  (defconst pdc/org-isb-results-cfg "replace")
  (pdc/set-org-babel-default-inline-header-args :results pdc/org-isb-results-cfg)
#+end_src

**** rownames
     :PROPERTIES:
     :ID:       938C58FF-4E82-4297-AF1F-C7B2B0B6D763
     :END:

#+begin_quote
Handle row names in tables
#+end_quote

{{{lp-configure-each-sb}}}

**** sep
     :PROPERTIES:
     :ID:       B7631DBD-3AE0-4390-9A34-91E1F2054716
     :END:

#+begin_quote
Delimiter for writing tabular results outside Org
#+end_quote

{{{lp-configure-each-sb}}}

**** var
     :PROPERTIES:
     :ID:       2FEBEF8B-DEC8-4A43-BE10-F5310F56C943
     :END:

#+begin_quote
Pass arguments to code blocks
#+end_quote

- *The* most revealing of the power of Org-Mode's LP offering
- Values-by-reference
  - Table
  - List
  - Source-Block without and with parameters
  - Literal-Block
- Indexable variable names
- Emacs Lisp evaluation of variables

*** Weaving
    :PROPERTIES:
    :ID:       F6E77D77-B8EB-4C85-BB98-1452F450D43E
    :END:

Help the reader make sense of the document by displaying its internal
properties.

#+name: 196A76F0-DCE5-4193-9E17-121A101F6C00
#+begin_src emacs-lisp
(setq org-export-with-properties t)
#+end_src

- Stop your flow to monitor the export for errors
  - Expect it to start weaves for all weavers asynchronously, but this
    isn't what happens; main thread is blocked until weaves complete.

#+name: C2FD2AFC-B5EE-4552-B02E-8C9E04AC092D
#+begin_src emacs-lisp
(setq org-export-in-background nil)
#+end_src

Make sure that exported files are Unicode UTF-8.

#+name: 5FBCD12A-50D0-47D1-836C-FD8B93739728
#+begin_src emacs-lisp
(setq org-export-coding-system 'utf-8)
#+end_src

Do not preserve line-breaks when exporting, instead let the
destination formatter handle it as it sees fit. Behaviour is a little
weird when exporting to a buffer, apparently.

#+name: BE47AF92-FEA4-4693-BDAA-1480AAF14C73
#+begin_src emacs-lisp
(setq org-export-preserve-breaks nil)
#+end_src

When exporting anything, do not insert the exported content into the
kill ring.

#+name: D95581A4-02E5-4AA1-98F0-B32FECDAAE4E
#+begin_src emacs-lisp
(setq export-copy-to-kill-ring nil)
#+end_src

By default, I don't want a table of contents. It's easy to enable this
with a property on the rare occasions I do, it makes more sense to
turn it off here.

#+name: 4894DF5D-83EE-4E73-A947-89F48BEBD41C
#+begin_src emacs-lisp
(setq org-export-with-toc nil)
#+end_src

On export, maintain the literal spacing as found in the source block.
Obviously this is important for make-files. It's really important
everywhere because anything else would violate the law of least
surprise.

#+name: E19ACA2A-ED4D-4262-8AC0-657014FF1451
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

Maximise flexibility for weaving operations during export.

#+name: FD8F408E-F0ED-4FD7-B986-C33B616AA5B9
#+begin_src emacs-lisp
(setq org-export-allow-bind-keywords t)
#+end_src

Disable element caching because it might break weaves via [[https://lists.gnu.org/archive/html/emacs-orgmode/2015-09/msg00646.html][this thread]].

#+name: 1B888872-BDEB-4017-BC07-4FDD6D81AB99
#+begin_src emacs-lisp
(setq org-element-use-cache nil)
#+end_src

**** exports
     :PROPERTIES:
     :ID:       FAFC49CA-ABE1-4664-8720-AC5C6629A92B
     :END:

#+begin_quote
Export code and/or results
#+end_quote

Always share source blocks and their results. Whether or not generate
a result for a particular source block is configured per-block. If you
don't want to share a result for a source block, then disable storage
of results on that block.

#+name: F02316C6-6DDD-4372-8E86-6DC770B27E9F
#+begin_src emacs-lisp
(pdc/set-org-babel-default-header-args :exports "both")
#+end_src

Use inline Source-Blocks to provide values read as part of the
document. Don't show their source code. Allows inline Source-Blocks to
function as /rich/ macros when combined with ~org-sbe~.

#+name: A44799A2-CE0F-4810-9958-F6DBC1BD2E3E
#+begin_src emacs-lisp
(pdc/set-org-babel-default-inline-header-args :exports "results")
#+end_src

**** wrap
     :PROPERTIES:
     :ID:       3379799E-9759-4CF6-9309-AF90E7BC048E
     :END:

#+begin_quote
Mark source block evaluation results
#+end_quote

Inline Source-Blocks are recognizable by their =verbatim= fornt. They
do not interrupt the flow. Source-Blocks are their own entities. They
stand out. Their results possibly need to be visibly noticeably different for
the reader, but wrapping them in an EXAMPLE special block is not the way to go.

#+name: 95104A71-35DA-45F0-89D6-B1EDEB175F05
#+begin_src emacs-lisp
(setq org-babel-default-header-args (assq-delete-all :wrap org-babel-default-header-args:sql))
(setq org-babel-default-header-args (assq-delete-all :wrap org-babel-default-header-args))
#+end_src


Diagramming languges require =RESULTS= output for exporting.

#+name: 56D0261B-CDA0-44EE-82C0-CC122C59116D
#+begin_src emacs-lisp
  (pdc/set-org-babel-default-header-args:ditaa :wrap "RESULTS")
  (pdc/set-org-babel-default-header-args:dot :wrap "RESULTS")
  (pdc/set-org-babel-default-header-args:plantuml :wrap "RESULTS")
#+end_src

#+RESULTS:
#+BEGIN_EXAMPLE
((:wrap . RESULTS) (:results . file) (:exports . results))
#+END_EXAMPLE
